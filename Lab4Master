% lab4_master.m
% Master file for EME 171 Lab 4: Surge Tank Simulation

clear; clc; close all;

% Global parameters
global rho g Ap Cf L Q0_initial At_start

% Constants
rho = 1000;            % Water density (kg/m^3)
g = 9.81;              % Gravity (m/s^2)
Ap = 0.1;              % Pipe area (m^2)
Cf = 49000;            % Fluid resistance constant (kg/m^7)
L = 50;                % Pipe section lengths (m)
Q0_initial = 1.5;      % Initial turbine flow (m^3/s)

% Time control parameters
t_start = 0;           % Start time (s)
t_end = 5;             % End time (s)
time_step = 0.001;     % Time step (s)
tspan = t_start:time_step:t_end;

% Initial steady-state tank area and other variables
At_start = 0.2; % Starting tank area (m^2)

% Calculate initial conditions
p1_initial = rho * Q0_initial * Ap;
p2_initial = rho * Q0_initial * Ap;
V1_initial = Q0_initial * L / Ap; % Initial tank 1 volume
V2_initial = Q0_initial * L / Ap; % Initial tank 2 volume
initial_conditions = [p1_initial; p2_initial; V1_initial; V2_initial];

% Run simulation
[time, state] = ode45(@equations_of_motion, tspan, initial_conditions); % Ensure this line matches equations_of_motion.m

% Post-process and analyze results
h1 = state(:, 3) / At_start; % Tank 1 height
h2 = state(:, 4) / At_start; % Tank 2 height

% Calculate turbine flow as a function of time
Q0 = arrayfun(@(t) (Q0_initial * (1 - t / 0.15)) .* (t <= 0.15), tspan); % Ramp function

% Plot tank heights vs. time
figure;
subplot(2, 1, 1);
plot(time, h1, 'b-', 'DisplayName', 'Tank 1 Height');
hold on;
plot(time, h2, 'r-', 'DisplayName', 'Tank 2 Height');
xlabel('Time (s)');
ylabel('Height (m)');
title('Tank Heights vs Time');
legend;
grid on;

% Plot turbine input flow vs. time
subplot(2, 1, 2);
plot(tspan, Q0, 'k-', 'DisplayName', 'Turbine Flow Input');
xlabel('Time (s)');
ylabel('Flow (m^3/s)');
title('Turbine Input Flow vs Time');
legend;
grid on;

% Display the minimum tank area
disp(['Desired tank area: ', num2str(At_start), ' m^2']);

% Adjust tank area incrementally until no overflow occurs
max_height = 10; % Example: assumed max allowable height (adjust as needed)
while max(h1) > max_height || max(h2) > max_height
    At_start = At_start + 0.05; % Increment tank area
    [time, state] = ode45(@equations_of_motion, tspan, initial_conditions);
    h1 = state(:, 3) / At_start;
    h2 = state(:, 4) / At_start;
end

% Post-process and analyze results
analyze_results(time, state);
